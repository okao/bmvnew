// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// enum UserRole {
//   user
//   admin
// }

// model Account {
//   id                            String      @id @default(cuid())
//   userId                        String      @map("user_id")
//   type                          String
//   provider                      String
//   providerAccountId             String      @map("provider_account_id")
//   refresh_token                 String?     @db.Text
//   access_token                  String?     @db.Text
//   expires_at                    Int?
//   token_type                    String?
//   scope                         String?
//   id_token                      String?     @db.Text
//   session_state                 String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)
//   @@unique([provider, providerAccountId])
//   @@map("accounts")
// }

// model Session {
//   id                            String      @id @default(cuid())
//   sessionToken                  String      @unique @map("session_token")
//   userId                        String      @map("user_id")
//   expires                       DateTime
//   user                          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@map("sessions")
// }

// model User {
//   id                            String      @id @default(cuid())
//   name                          String?
//   surname                       String?
//   username                      String?     @unique
//   email                         String?     @unique
//   emailVerified                 DateTime?   @map("email_verified")
//   emailVerificationToken        String?     @unique @map("email_verification_token")
//   passwordHash                  String?     @map("password_hash")
//   resetPasswordToken            String?     @unique @map("reset_password_token")
//   resetPasswordTokenExpiry      DateTime?   @map("reset_password_token_expiery")
//   image                         String?
//   createdAt                     DateTime    @default(now()) @map("created_at")
//   role                          UserRole[]  @default([user])
//   accounts                      Account[]
//   sessions                      Session[]

//   @@map("users")
// }

// model VerificationToken {
//   identifier                    String
//   token                         String      @unique
//   expires                       DateTime

//   @@unique([identifier, token])
//   @@map("verification_tokens")
// }


// model NewsletterSubscriber {
//   id                            String      @id @default(cuid())
//   email                         String      @unique
//   createdAt                     DateTime    @default(now()) @map("created_at")

//   @@map("newsletter_subscribers")
// }

model Publisher {
  id      Int      @id @default(autoincrement())
  email   String   @unique
  name    String?
}

enum Locale {
  dv
  en
}

// tags #needs seed data
model Tag {
  id      String      @id @default(uuid())
  name    String      @unique
  locale  Locale      @default(dv)
  slug    String?     @unique

  //name of the table that has the many to many relationship
  @@map("tags")

  //relationship with the post model
  // posts   Post[]      @relation("PostTags")
}

// categories #needs seed data
model Category {
  id      String    @id @default(uuid())
  name    String    @unique
  locale  Locale    @default(dv)
  slug    String    @unique

  //name of the table that has the many to many relationship
  @@map("categories")

  //relationship with the post model
  // posts   Post[]
}

// images
model Image {
  id      String    @id @default(uuid())
  url     String
  alt     String?
  title   String?
  width   Int
  height  Int

  //name of the table that has the many to many relationship
  @@map("images")

  //relationship with the image sprite model
  imageSprites  ImageSprite[] @relation("ImageSpriteImages")

  //relationship with the post model
  posts         Post[]         @relation("MainImagePost")

  //relationship with the post model
  // mainImagePosts  Post[]       @relation("PostImages")

  //relationship with the breaking news model
  breakingNews  BreakingNews[] @relation("MainImageBreakingNews")

  //relationship with the breaking news content model
  breakingNewsContents  BreakingNewsContent[] @relation("MainImageBreakingNewsContent")

  //relationship with the ad model
  ads           Ad[]           @relation("MainImageAd")
}

//image sprites
model ImageSprite {
  id      String    @id @default(uuid())
  url     String
  alt     String?
  title   String?
  width   Int
  height  Int

  //name of the table that has the many to many relationship
  @@map("image_sprites")

  //relationship with the image model
  images  Image[] @relation("ImageSpriteImages")

  //relationship with the breaking news model

}

// user types #needs seed data
model UserType {
  id            Int      @id @default(autoincrement())
  name          String   @unique
  description   String?

  //name of the table that has the many to many relationship
  @@map("user_types")

  //relationship with the user model
  users  User[]
}

// users
model User {
  id            String   @id @default(uuid())
  email         String   @unique
  password      String
  name          String?
  userTypeId    Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  //name of the table that has the many to many relationship
  @@map("users")

  //relationship with the user type model
  userType      UserType @relation(fields: [userTypeId], references: [id])

  //relationship with the post model
  posts         Post[]  @relation("AuthorUser")

  //relationship with the post model
  publishedPosts  Post[]  @relation("PublisherUser")

  //relationship with the comment model
  comments      Comment[]
}

// posts
model Post {
  id            String    @id @default(uuid())
  title         String
  slug          String    @unique
  content       String
  published     Boolean   @default(false)
  publishedAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  //name of the table that has the many to many relationship
  @@map("posts")

  //relationship with the user model
  author        User      @relation(fields: [authorId], references: [id], name: "AuthorUser")
  authorId      String

  //relationship with the publisher model
  publisher     User @relation(fields: [publisherId], references: [id], name: "PublisherUser")
  publisherId   String

  // //relationship with the tag model
  // tags          Tag[]     @relation("PostTags")

  //relationship with the category model
  // categories    Category[]

  //relationship with the image model
  mainImage     Image?    @relation("MainImagePost", fields: [mainImageId], references: [id])
  mainImageId   String?

  //other images
  // images        Image[]   @relation("PostImages")

  //relationship with the comment model
  // comments      Comment[]
}

// breaking news
model BreakingNews {
  id            String    @id @default(uuid())
  title         String
  content       String?
  published     Boolean   @default(false)
  publishedAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  //name of the table that has the many to many relationship
  @@map("breaking_news")

  //main image
  mainImage     Image?    @relation("MainImageBreakingNews", fields: [mainImageId], references: [id])
  mainImageId   String?

  //relationship with the breaking news content model
  breakingNewsContent  BreakingNewsContent[]
}

//breaking news contents
model BreakingNewsContent {
  id            String    @id @default(uuid())
  title         String
  content       String
  published     Boolean   @default(true)
  publishedAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  //name of the table that has the many to many relationship
  @@map("breaking_news_contents")

  //relationship with the breaking news model
  breakingNews  BreakingNews @relation(fields: [breakingNewsId], references: [id])
  breakingNewsId String

  //relationship with the image model
  mainImage     Image?    @relation("MainImageBreakingNewsContent", fields: [mainImageId], references: [id])
  mainImageId   String?
}

//ad types #needs seed data
model AdType {
  id            Int      @id @default(autoincrement())
  name          String   @unique
  description   String?

  //name of the table that has the many to many relationship
  @@map("ad_types")

  //relationship with the ad model
  ads  Ad[]
}

// ads
model Ad {
  id            String    @id @default(uuid())
  title         String
  content       String?
  published     Boolean   @default(false)
  publishedAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  //name of the table that has the many to many relationship
  @@map("ads")

  //main image
  mainImage     Image?    @relation("MainImageAd", fields: [mainImageId], references: [id])
  mainImageId   String?

  //relationship with the ad type model
  adType        AdType @relation(fields: [adTypeId], references: [id])
  adTypeId      Int
}

//comments
model Comment {
  id            String    @id @default(uuid())
  content       String
  published     Boolean   @default(false)
  publishedAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  //name of the table that has the many to many relationship
  @@map("comments")

  //relationship with the post model
  // post          Post      @relation(fields: [postId], references: [id])
  // postId        String

  //relationship with the user model
  user          User      @relation(fields: [userId], references: [id])
  userId        String
}